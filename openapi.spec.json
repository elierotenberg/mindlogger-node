{
  "basePath": "/api/v1",
  "definitions": {},
  "host": "api.mindlogger.org",
  "info": {
    "title": "Girder REST API",
    "version": null
  },
  "paths": {
    "/account/manage/pin": {
      "put": {
        "description": "this endpoint is used for reviewer/manager/coordinators to update pin status. <br>",
        "operationId": "account_updatePin",
        "parameters": [
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "user profile id to update pin status",
            "in": "query",
            "name": "profileId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "if true, pin user",
            "in": "query",
            "name": "newState",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Update pin status.",
        "tags": [
          "account"
        ]
      }
    },
    "/account/updateAlertStatus/{id}": {
      "put": {
        "description": "This endpoint is used for reviewer/manager to update view status for notifications. <br>",
        "operationId": "account_updateAlertStatus",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "id of alert to update status",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Update view status for alerts.",
        "tags": [
          "account"
        ]
      }
    },
    "/account/users": {
      "get": {
        "description": "this endpoint is used to get user-list for an account. <br>",
        "operationId": "account_getUsers",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "if set, get result for only specified applet",
            "in": "query",
            "name": "appletId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "user",
            "description": "One of dict_keys(['user', 'coordinator', 'editor', 'manager', 'reviewer'])",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "",
            "description": "string to be used as a filter for MRN",
            "in": "query",
            "name": "MRN",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "field to be used for sorting users: sortBy, sortDesc fields are available",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "pagination info - allow, pageIndex, recordsPerPage fields are available",
            "in": "query",
            "name": "pagination",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get userlist.",
        "tags": [
          "account"
        ]
      }
    },
    "/account/{id}": {
      "put": {
        "operationId": "account_updateAccountDB",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "account id",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": false,
            "description": "db uri for store the user responses",
            "in": "query",
            "name": "dbURL",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Update profile personal db uri",
        "tags": [
          "account"
        ]
      }
    },
    "/activity": {
      "get": {
        "operationId": "activity_getActivityByURL",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "URL of Activity.",
            "in": "query",
            "name": "url",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        },
        "summary": "Get an Activity by URL.",
        "tags": [
          "activity"
        ]
      }
    },
    "/activity/{id}": {
      "get": {
        "operationId": "activity_getActivity",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the activity."
          }
        },
        "summary": "Get an Activity by ID. Use the Activity ID to get the latest version, or use an Activity version's ID to get that specificversion.",
        "tags": [
          "activity"
        ]
      }
    },
    "/api_key": {
      "get": {
        "description": "Only site administrators may list keys for other users. If no userId parameter is passed, lists keys for the current user.",
        "operationId": "api_key_listKeys",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of the user whose keys to list.",
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "name",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "List API keys for a given user.",
        "tags": [
          "api_key"
        ]
      },
      "post": {
        "operationId": "api_key_createKey",
        "parameters": [
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "",
            "description": "Name for the API key.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "JSON list of scopes for this key.",
            "in": "query",
            "name": "scope",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Max number of days tokens created with this key will last.",
            "in": "query",
            "name": "tokenDuration",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "Whether the key is currently active.",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Create a new API key.",
        "tags": [
          "api_key"
        ]
      }
    },
    "/api_key/token": {
      "post": {
        "operationId": "api_key_createToken",
        "parameters": [
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "The API key.",
            "in": "query",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of days that the token should last.",
            "format": "float",
            "in": "query",
            "name": "duration",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Create a token from an API key.",
        "tags": [
          "api_key"
        ]
      }
    },
    "/api_key/{id}": {
      "delete": {
        "operationId": "api_key_deleteKey",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the API key to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Delete an API key.",
        "tags": [
          "api_key"
        ]
      },
      "put": {
        "operationId": "api_key_updateKey",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the API key.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Name for the key.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": [],
            "description": "JSON list of scopes for this key.",
            "in": "query",
            "name": "scope",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Max number of days tokens created with this key will last.",
            "in": "query",
            "name": "tokenDuration",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether the key is currently active.",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Update an API key.",
        "tags": [
          "api_key"
        ]
      }
    },
    "/applet": {
      "post": {
        "description": "Use this endpoint to create a new applet from protocol-url. <br>You will need to wait for several minutes (5-10 mins) to see a new applet. <br>When it's created you will be able to get applet using GET^user/applets endpoint. <br>You will have all roles(manager, coordinator, editor, reviewer, user) for applets which you created.",
        "operationId": "applet_createApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "URL of Activity Set from which to create applet",
            "in": "query",
            "name": "protocolUrl",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "email for creator of applet",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name to give the applet. The Protocol's name will be used if this parameter is not provided.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Relationship from informant to individual of interest. Currently handled informant relationships are ['parent', 'self']",
            "in": "query",
            "name": "informant",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "en",
            "description": "Language of mail template and web link",
            "in": "query",
            "name": "lang",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "encryption info",
            "in": "formData",
            "name": "encryption",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "Create an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/fromJSON": {
      "post": {
        "description": "This endpoint is used to create a new applet using protocol with single-file format. <br>This endpoint will be widely used in the near future.(it'll take seconds if we create a new applet using this endpoint.)",
        "operationId": "applet_createAppletFromProtocolData",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing protocol information for an applet",
            "in": "formData",
            "name": "protocol",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "email for creator of applet",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name to give the applet. The Protocol's name will be used if this parameter is not provided.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Relationship from informant to individual of interest. Currently handled informant relationships are ['parent', 'self']",
            "in": "query",
            "name": "informant",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "encryption info",
            "in": "formData",
            "name": "encryption",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "Create an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/setBadge": {
      "post": {
        "description": "this endpoint is used to reset badge parameter in profile collection. <br>users who are associated with that group will be able to connect to this endpoint.",
        "operationId": "applet_setBadgeCount",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": 0,
            "description": "set badge status",
            "in": "query",
            "name": "badge",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Reset badge parameter",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/validateName": {
      "get": {
        "description": "This endpoint is used for validating applet name. <br>",
        "operationId": "applet_validateAppletName",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "name for new of applet which needs validation",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Validate applet name",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}": {
      "delete": {
        "description": "this endpoint is used for deactivating an applet. <br>we don't completely remove applet from database and we can revert it when it's needed.",
        "operationId": "applet_deactivateApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of the applet to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "Deactivate an applet by ID.",
        "tags": [
          "applet"
        ]
      },
      "get": {
        "description": "use this api to get applet info (protocol, activity, item) from applet_id. <br>refreshCache parameter in this endpoint is deprecated and you don't need to set it.",
        "operationId": "applet_getApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "true if retrieve schedule info in applet metadata",
            "in": "query",
            "name": "retrieveSchedule",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "true if retrieve all events in applet metadata",
            "in": "query",
            "name": "retrieveAllEvents",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Read access was denied for this applet."
          }
        },
        "summary": "Get an applet by ID.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/assign": {
      "put": {
        "description": "this endpoint is used to assign group role for an applet. <br>users who are associated with that group will be able to connect to this applet.",
        "operationId": "applet_assignGroup",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "ID of the group to assign.",
            "in": "query",
            "name": "group",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "user",
            "description": "Role to invite this user to. One of dict_keys(['user', 'coordinator', 'editor', 'manager', 'reviewer'])",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Requires a JSON Object in the form \n```{  \"groups\": {    \"«relationship»\": []  },  \"users\": {    \"«relationship»\": []  }}``` \n For 'user' or 'reviewer' assignments, specify group-level relationships, filling in '«relationship»' with a JSON-ld key semantically defined in in your context, and IDs in the value Arrays (either applet-specific or canonical IDs in the case of users; applet-specific IDs will be stored either way).",
            "in": "formData",
            "name": "subject",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder or its new parent object."
          }
        },
        "summary": "Assign a group to a role in an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/constraints": {
      "put": {
        "deprecated": true,
        "operationId": "applet_setConstraints",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Deprecated. Do not use.schedule.",
            "in": "query",
            "name": "activity",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Deprecated. Do not use.",
            "in": "formData",
            "name": "schedule",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Read access was denied for this applet."
          }
        },
        "summary": "Deprecated. Do not use",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/data": {
      "get": {
        "description": "This endpoint returns user's response data for your applet by json/csv format. <br>You'll need to access this endpoint only if you are owner/manager of this applet.",
        "operationId": "applet_getAppletData",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of the applet for which to fetch data",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": "",
            "description": "Only retrieves responses from the given users",
            "in": "query",
            "name": "users",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "Get all data you are authorized to see for an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/deleteUser": {
      "delete": {
        "description": "this endpoint is used for deleting user's access to applet. <br>",
        "operationId": "applet_deleteUserFromApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of the applet",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "id of profile to be deleted",
            "in": "query",
            "name": "profileId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "true if delete response",
            "in": "query",
            "name": "deleteResponse",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "delete user from applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/duplicate": {
      "post": {
        "description": "This endpoint is used to create applet from existing one. <br>Only managers/editors of applets are able to access to this endpoint.",
        "operationId": "applet_duplicateApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name to give the applet.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "en",
            "description": "Language of response message",
            "in": "query",
            "name": "lang",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "Create an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/encryption": {
      "put": {
        "operationId": "applet_setAppletEncryption",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "encryption info which public key and prime for applet",
            "in": "formData",
            "name": "encryption",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "update encryption info for applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/fromJSON": {
      "put": {
        "description": "This endpoint is used to update existing applet. <br>(updating applet will take few seconds.)",
        "operationId": "applet_updateAppletFromProtocolData",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name to give the applet. The Protocol's name will be used if this parameter is not provided.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing protocol information for an applet",
            "in": "formData",
            "name": "protocol",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "Create an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/getSchedule": {
      "put": {
        "description": "This endpoint is used to get schedule data for an applet. <br>This endpoint returns schedule info for logged in user unless getAllEvents parameter is set to true. <br>* only coordinator/managers are able to set getAllEvents to true when they are making request to this endpoint",
        "operationId": "applet_getSchedule",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "return all events for an applet if true",
            "in": "query",
            "name": "getAllEvents",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "true only if get today's event, valid only if getAllEvents is set to false",
            "format": "int32",
            "in": "query",
            "name": "numberOfDays",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "events that user cached on local device",
            "in": "formData",
            "name": "localEvents",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Read access was denied for this applet."
          }
        },
        "summary": "Get schedule information for an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/groups": {
      "get": {
        "description": "Use this endpoint to get associated groups for an applet. <br>users who are associated with one of group for an applet will be able to connect this applet.",
        "operationId": "applet_getAppletGroups",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of the Applet.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "user",
            "description": "One of {'manager', 'editor', 'reviewer', 'coordinator', 'user'}",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Read access was denied for this applet."
          }
        },
        "summary": "Get associated groups for a given role and applet ID.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/informant": {
      "put": {
        "description": "managers can use this endpoint to update informant relationship for an applet.",
        "operationId": "applet_updateInformant",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of the applet to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Relationship from informant to individual of interest. Currently handled informant relationships are ['parent', 'self']",
            "in": "query",
            "name": "informant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "(managers only) Update the informant of an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/invitations": {
      "get": {
        "description": "this endpoint is used to getting invitations for an applet. <br>coordinator/managers can make request to this endpoint.",
        "operationId": "applet_getAppletInvitations",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get invitations for applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/invite": {
      "post": {
        "description": "coordinator/managers can use this endpoint to create a new invitation url. <br>This endpoint is deprecated. (you'll need to use POST^applet/[id]/inviteUser instead of this endpoint.)",
        "operationId": "applet_invite",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "user",
            "description": "Role to invite this user to. One of {'manager', 'editor', 'reviewer', 'coordinator', 'user'}",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "ID code for data reporting. One will be generated if none is provided.",
            "in": "query",
            "name": "idCode",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Optional, coordinator-defined user profile information, eg, `displayName`, `email`",
            "in": "formData",
            "name": "profile",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder or its new parent object."
          }
        },
        "summary": "Invite a user to a role in an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/inviteUser": {
      "post": {
        "description": "coordinator/manager can use this endpoint to invite a user for his applet. <br>user who is invited will get invitation link via email so that they can accept/decline invitation there.",
        "operationId": "applet_inviteUser",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "user",
            "description": "Role to invite this user to. One of {'manager', 'editor', 'reviewer', 'coordinator', 'user'}",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "required, email of user",
            "in": "query",
            "name": "email",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "firstName for user",
            "in": "query",
            "name": "firstName",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "lastName for user",
            "in": "query",
            "name": "lastName",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "MRN for user",
            "in": "query",
            "name": "MRN",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "en",
            "description": "Language of mail template and web link",
            "in": "query",
            "name": "lang",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": [],
            "description": "list of user_id that reviewer can review. <br>this field will be used only if manager invites reviewer.",
            "in": "formData",
            "name": "users",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied for the folder or its new parent object."
          }
        },
        "summary": "Invite a user to a role in an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/prepare": {
      "put": {
        "description": "This endpoint is used to update applet to be edited",
        "operationId": "applet_prepareAppletForEdit",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing protocol information for an applet",
            "in": "formData",
            "name": "protocol",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "Create an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/protocolData": {
      "get": {
        "operationId": "applet_getProtocolData",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": [],
            "description": "version of protocol data to retrieve",
            "in": "query",
            "name": "versions",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Read access was denied for this applet."
          }
        },
        "summary": "Get content of protocol by applet id.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/refresh": {
      "put": {
        "description": "this api is used for reloading applet. <br>manager/editors will need to make request to this endpoint when they update version of protocol.",
        "operationId": "applet_refresh",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "en",
            "description": "Language of response message",
            "in": "query",
            "name": "lang",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "reload protocol into database and refresh cache.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/reviewer/userList": {
      "get": {
        "description": "this endpoint will be used for managers/reviewers to view users that reviewer can access.",
        "operationId": "applet_getUserListForReviewer",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "id of reviewer, we do not need to set this value when reviewer want to see his user list",
            "in": "query",
            "name": "reviewerId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "GET user list that reviewer can view.",
        "tags": [
          "applet"
        ]
      },
      "put": {
        "description": "this endpoint will be used to update user list that reviewer can view.",
        "operationId": "applet_updateUserListForReviewer",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "id of reviewer",
            "in": "query",
            "name": "reviewerId",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": [],
            "description": "user list that reviewer can view",
            "in": "formData",
            "name": "users",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "replace",
            "description": "one of [\"replace\", \"add\", \"delete\"]",
            "in": "query",
            "name": "operation",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Update user list that reviewer can view.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/reviewerList": {
      "get": {
        "description": "this endpoint will be used for users to retrieve reviewer list that review his response.",
        "operationId": "applet_getReviewerListForUser",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "id of user to see reviewer list, we do not need to set this field if user want to see his reviewers",
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "GET reviewer list for user.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/roles": {
      "get": {
        "description": "Only users with write access can see roles.",
        "operationId": "applet_getAppletRoles",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of the Applet.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Write access was denied for this applet."
          }
        },
        "summary": "Get roles for an applet by ID.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/setRetention": {
      "post": {
        "operationId": "applet_setRetentionSettings",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 5,
            "description": "Set period days/weeks/months/years how long user data will be stored",
            "format": "int32",
            "in": "query",
            "name": "period",
            "required": true,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "year",
            "description": "Retention parameter inslude only day/week/month/year",
            "enum": [
              "day",
              "week",
              "month",
              "year"
            ],
            "in": "query",
            "name": "retention",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": true,
            "description": "set if you want to enable or disable retention settings",
            "in": "query",
            "name": "enabled",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Retentions settings for particular applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/setSchedule": {
      "put": {
        "description": "this endpoint is used for setting schedule for an applet. <br>only coordinator/managers are able to make request to this endpoint. <br>",
        "operationId": "applet_setSchedule",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "True if delete original events and insert all of them again.",
            "in": "query",
            "name": "rewrite",
            "required": false,
            "type": "boolean"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": [],
            "description": "id array of events specifying removed events",
            "in": "formData",
            "name": "deleted",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing schedule information for an applet",
            "in": "formData",
            "name": "schedule",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Read access was denied for this applet."
          }
        },
        "summary": "Set or update schedule information for an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/transferOwnerShip": {
      "put": {
        "description": "this endpoint will be used for owners to transfer ownership for an applet to another owner",
        "operationId": "applet_transferOwnerShip",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "email of user who will get ownership",
            "in": "query",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Invite a user to a role in an applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/updateRoles": {
      "put": {
        "operationId": "applet_updateRoles",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "id for applet user",
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "role info which contains information for grant/revoke roles",
            "in": "formData",
            "name": "roleInfo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "update role from employer of applet.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/users": {
      "get": {
        "description": "this endpoint is used to get user-list for an applet. <br>coordinator/managers can make request to this endpoint.",
        "operationId": "applet_getAppletUsers",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "True if retrieve roles for each user. only owner/managers/coordinators can use this field.",
            "in": "query",
            "name": "retrieveRoles",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get userlist, groups & statuses.",
        "tags": [
          "applet"
        ]
      }
    },
    "/applet/{id}/versions": {
      "get": {
        "operationId": "applet_getProtocolVersions",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "true if retrieve date for each version",
            "in": "query",
            "name": "retrieveDate",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Read access was denied for this applet."
          }
        },
        "summary": "Get content of protocol by applet id.",
        "tags": [
          "applet"
        ]
      }
    },
    "/assetstore": {
      "get": {
        "operationId": "assetstore_find",
        "parameters": [
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "name",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not an administrator."
          }
        },
        "summary": "List assetstores.",
        "tags": [
          "assetstore"
        ]
      },
      "post": {
        "description": "You must be an administrator to call this.",
        "operationId": "assetstore_createAssetstore",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Unique name for the assetstore.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Type of the assetstore.",
            "format": "int32",
            "in": "query",
            "name": "type",
            "required": true,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Root path on disk (for filesystem type).",
            "in": "query",
            "name": "root",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "File creation permissions (for filesystem type).",
            "in": "query",
            "name": "perms",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Database name (for GridFS type)",
            "in": "query",
            "name": "db",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Mongo host URI (for GridFS type)",
            "in": "query",
            "name": "mongohost",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Replica set name (for GridFS type)",
            "in": "query",
            "name": "replicaset",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The S3 bucket to store data in (for S3 type).",
            "in": "query",
            "name": "bucket",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "Optional path prefix within the bucket under which files will be stored (for S3 type).",
            "in": "query",
            "name": "prefix",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The AWS access key ID to use for authentication (for S3 type).",
            "in": "query",
            "name": "accessKeyId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The AWS secret key to use for authentication (for S3 type).",
            "in": "query",
            "name": "secret",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "The S3 service host (for S3 type).  Default is s3.amazonaws.com.  This can be used to specify a protocol and port as well using the form [http[s]://](host domain)[:(port)]. Do not include the bucket name here.",
            "in": "query",
            "name": "service",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "If this assetstore is read-only, set this to true.",
            "in": "query",
            "name": "readOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "us-east-1",
            "description": "The AWS region to which the S3 bucket belongs.",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "The credentials for connecting to S3 will be inferred by Boto rather than explicitly passed. Inferring credentials will ignore accessKeyId and secret.",
            "in": "query",
            "name": "inferCredentials",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to use S3 SSE to encrypt the objects uploaded to this bucket (for S3 type).",
            "in": "query",
            "name": "serverSideEncryption",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Assetstore"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not an administrator."
          }
        },
        "summary": "Create a new assetstore.",
        "tags": [
          "assetstore"
        ]
      }
    },
    "/assetstore/{id}": {
      "delete": {
        "description": "This will fail if there are any files in the assetstore.",
        "operationId": "assetstore_deleteAssetstore",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid.\n\nThe assetstore is not empty."
          },
          "403": {
            "description": "You are not an administrator."
          }
        },
        "summary": "Delete an assetstore.",
        "tags": [
          "assetstore"
        ]
      },
      "get": {
        "operationId": "assetstore_getAssetstore",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not an administrator."
          }
        },
        "summary": "Get information about an assetstore.",
        "tags": [
          "assetstore"
        ]
      },
      "put": {
        "operationId": "assetstore_updateAssetstore",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Unique name for the assetstore.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Root path on disk (for Filesystem type)",
            "in": "query",
            "name": "root",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "File creation permissions (for Filesystem type)",
            "in": "query",
            "name": "perms",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Database name (for GridFS type)",
            "in": "query",
            "name": "db",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Mongo host URI (for GridFS type)",
            "in": "query",
            "name": "mongohost",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Replica set name (for GridFS type)",
            "in": "query",
            "name": "replicaset",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The S3 bucket to store data in (for S3 type).",
            "in": "query",
            "name": "bucket",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "Optional path prefix within the bucket under which files will be stored (for S3 type).",
            "in": "query",
            "name": "prefix",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The AWS access key ID to use for authentication (for S3 type).",
            "in": "query",
            "name": "accessKeyId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The AWS secret key to use for authentication (for S3 type).",
            "in": "query",
            "name": "secret",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "The S3 service host (for S3 type).  Default is s3.amazonaws.com.  This can be used to specify a protocol and port as well using the form [http[s]://](host domain)[:(port)]. Do not include the bucket name here.",
            "in": "query",
            "name": "service",
            "required": false,
            "type": "string"
          },
          {
            "description": "If this assetstore is read-only, set this to true.",
            "in": "query",
            "name": "readOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "us-east-1",
            "description": "The AWS region to which the S3 bucket belongs.",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether this is the current assetstore",
            "in": "query",
            "name": "current",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "The credentials for connecting to S3 will be inferred by Boto rather than explicitly passed. Inferring credentials will ignore accessKeyId and secret.",
            "in": "query",
            "name": "inferCredentials",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to use S3 SSE to encrypt the objects uploaded to this bucket (for S3 type).",
            "in": "query",
            "name": "serverSideEncryption",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Assetstore"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not an administrator."
          }
        },
        "summary": "Update an existing assetstore.",
        "tags": [
          "assetstore"
        ]
      }
    },
    "/assetstore/{id}/files": {
      "get": {
        "operationId": "assetstore_getAssetstoreFiles",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "_id",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not an administrator."
          }
        },
        "summary": "Get a list of files controlled by an assetstore.",
        "tags": [
          "assetstore"
        ]
      }
    },
    "/assetstore/{id}/import": {
      "post": {
        "description": "This does not move or copy the existing data, it just creates references to it in the Girder data hierarchy. Deleting those references will not delete the underlying data. This operation is currently only supported for S3 assetstores.",
        "operationId": "assetstore_importData",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Root path within the underlying storage system to import.",
            "in": "query",
            "name": "importPath",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of a folder, collection, or user in Girder under which the data will be imported.",
            "in": "query",
            "name": "destinationId",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Type of the destination resource.",
            "enum": [
              "folder",
              "collection",
              "user"
            ],
            "in": "query",
            "name": "destinationType",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether to record progress on the import.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether folders containing only files should be imported as items.",
            "in": "query",
            "name": "leafFoldersAsItems",
            "required": false,
            "type": "boolean"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "If set, only filenames matching this regular expression will be imported.",
            "in": "query",
            "name": "fileIncludeRegex",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "If set, only filenames that do not match this regular expression will be imported. If a file matches both the include and exclude regex, it will be excluded.",
            "in": "query",
            "name": "fileExcludeRegex",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not an administrator."
          }
        },
        "summary": "Import existing data into an assetstore.",
        "tags": [
          "assetstore"
        ]
      }
    },
    "/collection": {
      "get": {
        "operationId": "collection_find",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name of the collection",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Pass this to perform a text search for collections.",
            "in": "query",
            "name": "text",
            "required": false,
            "type": "string"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "name",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/Collection"
              },
              "type": "array"
            }
          }
        },
        "summary": "List or search for collections.",
        "tags": [
          "collection"
        ]
      },
      "post": {
        "operationId": "collection_createCollection",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name for the collection. Must be unique.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Collection description.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether the collection should be publicly visible.",
            "in": "query",
            "name": "public",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not authorized to create collections."
          }
        },
        "summary": "Create a new collection.",
        "tags": [
          "collection"
        ]
      }
    },
    "/collection/details": {
      "get": {
        "operationId": "collection_getCollectionsDetails",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get detailed information of accessible collections.",
        "tags": [
          "collection"
        ]
      }
    },
    "/collection/{id}": {
      "delete": {
        "operationId": "collection_deleteCollection",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Admin permission denied on the collection."
          }
        },
        "summary": "Delete a collection by ID.",
        "tags": [
          "collection"
        ]
      },
      "get": {
        "operationId": "collection_getCollection",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read permission denied on the collection."
          }
        },
        "summary": "Get a collection by ID.",
        "tags": [
          "collection"
        ]
      },
      "put": {
        "operationId": "collection_updateCollection",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Unique name for the collection.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Collection description.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write permission denied on the collection."
          }
        },
        "summary": "Edit a collection by ID.",
        "tags": [
          "collection"
        ]
      }
    },
    "/collection/{id}/access": {
      "get": {
        "operationId": "collection_getCollectionAccess",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Admin permission denied on the collection."
          }
        },
        "summary": "Get the access control list for a collection.",
        "tags": [
          "collection"
        ]
      },
      "put": {
        "operationId": "collection_updateCollectionAccess",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The access control list as JSON.",
            "in": "query",
            "name": "access",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "List of public access flags to set on the collection.",
            "in": "query",
            "name": "publicFlags",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether the collection should be publicly visible.",
            "in": "query",
            "name": "public",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether the policies should be applied to all folders under this collection as well.",
            "in": "query",
            "name": "recurse",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "If recurse is set to True, this controls whether progress notifications will be sent.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Admin permission denied on the collection."
          }
        },
        "summary": "Set the access control list for a collection.",
        "tags": [
          "collection"
        ]
      }
    },
    "/collection/{id}/details": {
      "get": {
        "operationId": "collection_getCollectionDetails",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Read access was denied on the collection."
          }
        },
        "summary": "Get detailed information about a collection.",
        "tags": [
          "collection"
        ]
      }
    },
    "/collection/{id}/download": {
      "get": {
        "operationId": "collection_downloadCollection",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "JSON list of MIME types to include.",
            "in": "query",
            "name": "mimeFilter",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the collection."
          }
        },
        "summary": "Download an entire collection as a zip archive.",
        "tags": [
          "collection"
        ]
      }
    },
    "/collection/{id}/metadata": {
      "delete": {
        "operationId": "collection_deleteMetadata",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON list containing the metadata fields to delete",
            "in": "body",
            "name": "fields",
            "required": true,
            "schema": {
              "$ref": "#/definitions/string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "400": {
            "description": "ID was invalid.\n\nInvalid JSON passed in request body.\n\nMetadata key name was invalid."
          },
          "403": {
            "description": "Write access was denied for the collection."
          }
        },
        "summary": "Delete metadata fields on a collection.",
        "tags": [
          "collection"
        ]
      },
      "put": {
        "description": "Set metadata fields to null in order to delete them.",
        "operationId": "collection_setMetadata",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the metadata keys to add",
            "in": "body",
            "name": "metadata",
            "required": true,
            "schema": {
              "$ref": "#/definitions/string"
            }
          },
          {
            "default": false,
            "description": "Whether \"null\" is allowed as a metadata value.",
            "in": "query",
            "name": "allowNull",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "400": {
            "description": "ID was invalid.\n\nInvalid JSON passed in request body.\n\nMetadata key name was invalid."
          },
          "403": {
            "description": "Write access was denied for the collection."
          }
        },
        "summary": "Set metadata fields on a collection.",
        "tags": [
          "collection"
        ]
      }
    },
    "/context": {
      "get": {
        "operationId": "context_getContext",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Get JSON-LD Context for this Mindlogger Database.",
        "tags": [
          "context"
        ]
      }
    },
    "/context/skin": {
      "get": {
        "operationId": "context_getSkin",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "@context.@language",
            "description": "Language of skin to get. Must follow <a href=\"https://tools.ietf.org/html/bcp47\">BCP 47</a>",
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get the application skinning information for this server.",
        "tags": [
          "context"
        ]
      }
    },
    "/file": {
      "post": {
        "description": "Use POST /file/chunk to send the contents of the file.  The data for the first chunk of the file can be included with this query by sending it as the body of the request using an appropriate content-type and with the other parameters as part of the query string.  If the entire file is uploaded via this call, the resulting file is returned.",
        "operationId": "file_initUpload",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Type being uploaded into.",
            "enum": [
              "folder",
              "item"
            ],
            "in": "query",
            "name": "parentType",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the parent.",
            "in": "query",
            "name": "parentId",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name of the file being created.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Size in bytes of the file.",
            "format": "int32",
            "in": "query",
            "name": "size",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The MIME type of the file.",
            "in": "query",
            "name": "mimeType",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "If this is a link file, pass its URL instead of size and mimeType using this parameter.",
            "in": "query",
            "name": "linkUrl",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "If included, this information is passed to the data.process event when the upload is complete.",
            "in": "query",
            "name": "reference",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Direct the upload to a specific assetstore (admin-only).",
            "in": "query",
            "name": "assetstoreId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Write access was denied on the parent folder."
          },
          "500": {
            "description": "Failed to create upload."
          }
        },
        "summary": "Start a new upload or create an empty or link file.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/chunk": {
      "post": {
        "description": "The data for the chunk should be sent as the body of the request using an appropriate content-type and with the other parameters as part of the query string.",
        "operationId": "file_readChunk",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "formData",
            "name": "uploadId",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Offset of the chunk in the file.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid.\n\nReceived too many bytes.\n\nChunk is smaller than the minimum size."
          },
          "403": {
            "description": "You are not the user who initiated the upload."
          },
          "500": {
            "description": "Failed to store upload."
          }
        },
        "summary": "Upload a chunk of a file.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/completion": {
      "post": {
        "description": "This is only required in certain non-standard upload behaviors. Clients should know which behavior models require the finalize step to be called in their behavior handlers.",
        "operationId": "file_finalizeUpload",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "formData",
            "name": "uploadId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid.\n\nThe upload does not require finalization.\n\nNot enough bytes have been uploaded."
          },
          "403": {
            "description": "You are not the user who initiated the upload."
          }
        },
        "summary": "Finalize an upload explicitly if necessary.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/offset": {
      "get": {
        "operationId": "file_requestOffset",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "formData",
            "name": "uploadId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "The ID was invalid, or the offset did not match the server's record."
          }
        },
        "summary": "Request required offset before resuming an upload.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/upload/{id}": {
      "delete": {
        "operationId": "file_cancelUpload",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You lack permission to cancel this upload."
          }
        },
        "summary": "Cancel a partially completed upload.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/{id}": {
      "delete": {
        "operationId": "file_deleteFile",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied on the parent folder."
          }
        },
        "summary": "Delete a file by ID.",
        "tags": [
          "file"
        ]
      },
      "get": {
        "operationId": "file_getFile",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Read access was denied on the file."
          }
        },
        "summary": "Get a file's information.",
        "tags": [
          "file"
        ]
      },
      "put": {
        "operationId": "file_updateFile",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "The name to set on the file.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "The MIME type of the file.",
            "in": "query",
            "name": "mimeType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied on the parent folder."
          }
        },
        "summary": "Change file metadata such as name or MIME type.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/{id}/contents": {
      "put": {
        "description": "After calling this, send the chunks just like you would with a normal file upload.",
        "operationId": "file_updateFileContents",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Size in bytes of the new file.",
            "format": "int32",
            "in": "query",
            "name": "size",
            "required": true,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "If included, this information is passed to the data.process event when the upload is complete.",
            "in": "query",
            "name": "reference",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Direct the upload to a specific assetstore (admin-only).",
            "in": "query",
            "name": "assetstoreId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Change the contents of an existing file.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/{id}/copy": {
      "post": {
        "operationId": "file_copy",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the item to copy the file to.",
            "in": "formData",
            "name": "itemId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Copy a file.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/{id}/download": {
      "get": {
        "description": "This endpoint also accepts the HTTP \"Range\" header for partial file downloads.",
        "operationId": "file_download",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start downloading at this offset in bytes within the file.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "If you only wish to download part of the file, pass this as the index of the last byte to download. Unlike the HTTP Range header, the endByte parameter is non-inclusive, so you should set it to the index of the byte one past the final byte you wish to receive.",
            "format": "int32",
            "in": "query",
            "name": "endByte",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "attachment",
            "description": "Specify the Content-Disposition response header disposition-type value.",
            "enum": [
              "inline",
              "attachment"
            ],
            "in": "query",
            "name": "contentDisposition",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Arbitrary data to send along with the download request.",
            "in": "query",
            "name": "extraParameters",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied on the parent folder."
          }
        },
        "summary": "Download a file.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/{id}/download/{name}": {
      "get": {
        "description": "The name parameter doesn't alter the download.  Some download clients save files based on the last part of a path, and specifying the name satisfies those clients.",
        "operationId": "file_downloadWithName",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the file.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The name of the file.  This is ignored.",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start downloading at this offset in bytes within the file.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied on the parent folder."
          }
        },
        "summary": "Download a file.",
        "tags": [
          "file"
        ]
      }
    },
    "/file/{id}/move": {
      "put": {
        "operationId": "file_moveFileToAssetstore",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The destination assetstore.",
            "in": "formData",
            "name": "assetstoreId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Controls whether progress notifications will be sent.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Move a file to a different assetstore.",
        "tags": [
          "file"
        ]
      }
    },
    "/folder": {
      "get": {
        "description": "You must pass either a \"folderId\" or \"text\" field to specify how you are searching for folders.  If you omit one of these parameters the request will fail and respond : \"Invalid search mode.\"",
        "operationId": "folder_find",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Type of the folder's parent",
            "enum": [
              "folder",
              "user",
              "collection"
            ],
            "in": "query",
            "name": "parentType",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the folder's parent.",
            "in": "query",
            "name": "parentId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Pass to perform a text search.",
            "in": "query",
            "name": "text",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Pass to lookup a folder by exact name match. Must pass parentType and parentId as well when using this.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "lowerName",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/Folder"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Read access was denied on the parent resource."
          }
        },
        "summary": "Search for folders by certain properties.",
        "tags": [
          "folder"
        ]
      },
      "post": {
        "operationId": "folder_createFolder",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "folder",
            "description": "Type of the folder's parent",
            "enum": [
              "folder",
              "user",
              "collection"
            ],
            "in": "query",
            "name": "parentType",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the folder's parent.",
            "in": "query",
            "name": "parentId",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Name of the folder.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "",
            "description": "Description for the folder.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Return existing folder if it exists rather than creating a new one.",
            "in": "query",
            "name": "reuseExisting",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Whether the folder should be publicly visible. By default, inherits the value from parent folder, or in the case of user or collection parentType, defaults to False.",
            "in": "query",
            "name": "public",
            "required": false,
            "type": "boolean"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the metadata keys to add",
            "in": "formData",
            "name": "metadata",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Write access was denied on the parent"
          }
        },
        "summary": "Create a new folder.",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}": {
      "delete": {
        "operationId": "folder_deleteFolder",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether to record progress on this task.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Admin access was denied for the folder."
          }
        },
        "summary": "Delete a folder by ID.",
        "tags": [
          "folder"
        ]
      },
      "get": {
        "operationId": "folder_getFolder",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the folder."
          }
        },
        "summary": "Get a folder by ID.",
        "tags": [
          "folder"
        ]
      },
      "put": {
        "operationId": "folder_updateFolder",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Name of the folder.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Description for the folder.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Type of the folder's parent",
            "enum": [
              "folder",
              "user",
              "collection"
            ],
            "in": "query",
            "name": "parentType",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Parent ID for the new parent of this folder.",
            "in": "query",
            "name": "parentId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the metadata keys to add",
            "in": "formData",
            "name": "metadata",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder or its new parent object."
          }
        },
        "summary": "Update a folder or move it into a new parent.",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/access": {
      "get": {
        "operationId": "folder_getFolderAccess",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Admin access was denied for the folder."
          }
        },
        "summary": "Get the access control list for a folder.",
        "tags": [
          "folder"
        ]
      },
      "put": {
        "operationId": "folder_updateFolderAccess",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The JSON-encoded access control list.",
            "in": "query",
            "name": "access",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "JSON list of public access flags.",
            "in": "query",
            "name": "publicFlags",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether the folder should be publicly visible.",
            "in": "query",
            "name": "public",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether the policies should be applied to all subfolders under this folder as well.",
            "in": "query",
            "name": "recurse",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "If recurse is set to True, this controls whether progress notifications will be sent.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Admin access was denied for the folder."
          }
        },
        "summary": "Update the access control list for a folder.",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/add": {
      "put": {
        "operationId": "folder_addApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Applet of the id to be added",
            "in": "query",
            "name": "appletId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder or its new parent object."
          }
        },
        "summary": "Adds an applet into a folder",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/applets": {
      "get": {
        "operationId": "folder_getApplets",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "true if retrieve schedule info in applet metadata",
            "in": "query",
            "name": "retrieveSchedule",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "true if retrieve all events in applet metadata",
            "in": "query",
            "name": "retrieveAllEvents",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder or its new parent object."
          }
        },
        "summary": "Get all applets in a folder",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/contents": {
      "delete": {
        "description": "Cleans out all the items and subfolders from under a folder, but does not remove the folder itself.",
        "operationId": "folder_deleteContents",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the folder to clean.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether to record progress on this task.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied on the folder."
          }
        },
        "summary": "Remove all contents from a folder.",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/copy": {
      "post": {
        "operationId": "folder_copyFolder",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the original folder.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Type of the new folder's parent",
            "enum": [
              "folder",
              "user",
              "collection"
            ],
            "in": "query",
            "name": "parentType",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the parent document.",
            "in": "query",
            "name": "parentId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name for the new folder.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Description for the new folder.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Whether the folder should be publicly visible. By default, inherits the value from parent folder, or in the case of user or collection parentType, defaults to False. If 'original', use the value of the original folder.",
            "enum": [
              "true",
              "false",
              "original"
            ],
            "in": "query",
            "name": "public",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether to record progress on this task.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "A parameter was invalid.\n\nID was invalid."
          },
          "403": {
            "description": "Read access was denied on the original folder.\n\nWrite access was denied on the parent."
          }
        },
        "summary": "Copy a folder.",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/details": {
      "get": {
        "operationId": "folder_getFolderDetails",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Read access was denied on the folder."
          }
        },
        "summary": "Get detailed information about a folder.",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/download": {
      "get": {
        "operationId": "folder_downloadFolder",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "JSON list of MIME types to include.",
            "in": "query",
            "name": "mimeFilter",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the folder."
          }
        },
        "summary": "Download an entire folder as a zip archive.",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/metadata": {
      "delete": {
        "operationId": "folder_deleteMetadata",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON list containing the metadata fields to delete",
            "in": "body",
            "name": "fields",
            "required": true,
            "schema": {
              "$ref": "#/definitions/string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "ID was invalid.\n\nInvalid JSON passed in request body.\n\nMetadata key name was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder."
          }
        },
        "summary": "Delete metadata fields on a folder.",
        "tags": [
          "folder"
        ]
      },
      "put": {
        "description": "Set metadata fields to null in order to delete them.",
        "operationId": "folder_setMetadata",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the metadata keys to add",
            "in": "body",
            "name": "metadata",
            "required": true,
            "schema": {
              "$ref": "#/definitions/string"
            }
          },
          {
            "default": false,
            "description": "Whether \"null\" is allowed as a metadata value.",
            "in": "query",
            "name": "allowNull",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "ID was invalid.\n\nInvalid JSON passed in request body.\n\nMetadata key name was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder."
          }
        },
        "summary": "Set metadata fields on an folder.",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/pin": {
      "put": {
        "operationId": "folder_pinApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Applet id to be pinned",
            "in": "query",
            "name": "appletId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder or its new parent object."
          }
        },
        "summary": "Pins an applet into a folder",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/remove": {
      "delete": {
        "operationId": "folder_removeApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Applet of the id to be removed",
            "in": "query",
            "name": "appletId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder or its new parent object."
          }
        },
        "summary": "Removes an applet into a folder",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/rootpath": {
      "get": {
        "operationId": "folder_rootpath",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the folder."
          }
        },
        "summary": "Get the path to the root of the folder's hierarchy.",
        "tags": [
          "folder"
        ]
      }
    },
    "/folder/{id}/unpin": {
      "put": {
        "operationId": "folder_unpinApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Applet id to be unpinned",
            "in": "query",
            "name": "appletId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the folder or its new parent object."
          }
        },
        "summary": "Unpins an applet into a folder",
        "tags": [
          "folder"
        ]
      }
    },
    "/group": {
      "get": {
        "operationId": "group_find",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Pass this to perform a full-text search for groups.",
            "in": "query",
            "name": "text",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "If true, only return exact name matches. This is case sensitive.",
            "in": "query",
            "name": "exact",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "name",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Search for groups or list all groups.",
        "tags": [
          "group"
        ]
      },
      "post": {
        "description": "Must be logged in.",
        "operationId": "group_createGroup",
        "parameters": [
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Unique name for the group.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "",
            "description": "Description of the group.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether users can join without being invited.",
            "in": "query",
            "name": "openRegistration",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether the group should be publicly visible.",
            "in": "query",
            "name": "public",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Write access was denied on the parent"
          }
        },
        "summary": "Create a new group.",
        "tags": [
          "group"
        ]
      }
    },
    "/group/open": {
      "get": {
        "operationId": "group_getOpenGroups",
        "parameters": [
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "name",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "List all groups with open registration.",
        "tags": [
          "group"
        ]
      }
    },
    "/group/{id}": {
      "delete": {
        "operationId": "group_deleteGroup",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Admin access was denied for the group."
          }
        },
        "summary": "Delete a group by ID.",
        "tags": [
          "group"
        ]
      },
      "get": {
        "operationId": "group_getGroup",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the group."
          }
        },
        "summary": "Get a group by ID.",
        "tags": [
          "group"
        ]
      },
      "put": {
        "operationId": "group_updateGroup",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "The name to set on the group.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Description for the group.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether users can join without being invited.",
            "in": "query",
            "name": "openRegistration",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Whether the group should be publicly visible",
            "in": "query",
            "name": "public",
            "required": false,
            "type": "boolean"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Can admins or moderators directly add members to this group?  Only system administrators are allowed to set this field",
            "enum": [
              "default",
              "no",
              "yesmod",
              "yesadmin"
            ],
            "in": "query",
            "name": "addAllowed",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Write access was denied for the group."
          }
        },
        "summary": "Update a group by ID.",
        "tags": [
          "group"
        ]
      }
    },
    "/group/{id}/access": {
      "get": {
        "operationId": "group_getGroupAccess",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the group."
          }
        },
        "summary": "Get the access control list for a group.",
        "tags": [
          "group"
        ]
      },
      "put": {
        "operationId": "group_updateGroupAccess",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The JSON-encoded access control list.",
            "in": "query",
            "name": "access",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Admin access was denied for the user."
          }
        },
        "summary": "Update the access control list for a group.",
        "tags": [
          "group"
        ]
      }
    },
    "/group/{id}/admin": {
      "delete": {
        "operationId": "group_demote",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the user to demote.",
            "in": "formData",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You don't have permission to demote users."
          }
        },
        "summary": "Demote a user to a normal group member.",
        "tags": [
          "group"
        ]
      },
      "post": {
        "operationId": "group_promoteToAdmin",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the user to promote.",
            "in": "formData",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You don't have permission to promote users."
          }
        },
        "summary": "Promote a member to be an administrator of the group.",
        "tags": [
          "group"
        ]
      }
    },
    "/group/{id}/invitation": {
      "get": {
        "operationId": "group_getGroupInvitations",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "firstName",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Read access was denied for the group."
          }
        },
        "summary": "Show outstanding invitations for a group.",
        "tags": [
          "group"
        ]
      },
      "post": {
        "description": "The \"force\" option to this endpoint is only available to administrators and can be used to bypass the invitation process and instead add the user directly to the group.",
        "operationId": "group_inviteToGroup",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the user to invite or accept. Alternatively, provide `email`.",
            "in": "formData",
            "name": "userId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Email address of user to invite. Alternatively, provide `userId`.",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "The access level the user will be given when they accept the invitation.",
            "format": "int32",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "default": false,
            "description": "If you do not want this action to send an email to the target user, set this to true.",
            "in": "query",
            "name": "quiet",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Add user directly rather than sending an invitation (admin-only option).",
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Write access was denied for the group."
          }
        },
        "summary": "Invite a user to join a group, or accept a user's request to join.",
        "tags": [
          "group"
        ]
      }
    },
    "/group/{id}/member": {
      "delete": {
        "description": "If the specified user is not yet a member of the group, this will delete any outstanding invitation or membership request for the user. Passing no userId parameter will assume that the current user is removing themself.",
        "operationId": "group_removeFromGroup",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the user to remove. If not passed, will remove yourself from the group.",
            "in": "formData",
            "name": "userId",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Delete existing user data associated with this group membership?",
            "in": "query",
            "name": "delete",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You don't have permission to remove that user."
          }
        },
        "summary": "Remove a user from a group, or uninvite them.",
        "tags": [
          "group"
        ]
      },
      "get": {
        "operationId": "group_listMembers",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "firstName",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the group."
          }
        },
        "summary": "List members of a group.",
        "tags": [
          "group"
        ]
      },
      "post": {
        "operationId": "group_joinGroup",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You were not invited to this group, or do not have read access to it."
          }
        },
        "summary": "Request to join a group, or accept an invitation to join.",
        "tags": [
          "group"
        ]
      }
    },
    "/group/{id}/moderator": {
      "delete": {
        "operationId": "group_demote",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the user to demote.",
            "in": "formData",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You don't have permission to demote users."
          }
        },
        "summary": "Demote a user to a normal group member.",
        "tags": [
          "group"
        ]
      },
      "post": {
        "operationId": "group_promoteToModerator",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the user to promote.",
            "in": "formData",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You don't have permission to promote users."
          }
        },
        "summary": "Promote a member to be a moderator of the group.",
        "tags": [
          "group"
        ]
      }
    },
    "/invitation/{id}": {
      "delete": {
        "operationId": "invitation_declineInvitation",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of invitation",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Decline an invitation from id.",
        "tags": [
          "invitation"
        ]
      },
      "get": {
        "description": "This endpoint is used to get invitation from id. <br>(Used in the website to get invitation-html from id)",
        "operationId": "invitation_getInvitation",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of invitation",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Return a full HTML document rather than just the body?",
            "in": "query",
            "name": "fullHTML",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include a link to the invitation on MindLogger web?",
            "in": "query",
            "name": "includeLink",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Get an invitation by ID.",
        "tags": [
          "invitation"
        ]
      }
    },
    "/invitation/{id}/accept": {
      "post": {
        "description": "This endpoint is used for logged in user to accept invitation.",
        "operationId": "invitation_acceptInvitation",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of invitation",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "email for invited user",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Accept an invitation.",
        "tags": [
          "invitation"
        ]
      }
    },
    "/invitation/{id}/qr": {
      "get": {
        "operationId": "invitation_getQR",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Get a link to an invitation by QR code.",
        "tags": [
          "invitation"
        ]
      }
    },
    "/invitation/{id}/{lang}/accept": {
      "get": {
        "operationId": "invitation_acceptInvitationByToken",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of invitation",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "email for invited user",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Authentication token to link user to invitation.",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Accept an invitation by token.",
        "tags": [
          "invitation"
        ]
      }
    },
    "/item": {
      "get": {
        "description": "You must pass either a \"itemId\" or \"text\" field to specify how you are searching for items.  If you omit one of these parameters the request will fail and respond : \"Invalid search mode.\"",
        "operationId": "item_find",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Pass this to list all items in a folder.",
            "in": "query",
            "name": "folderId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Pass this to perform a full text search for items.",
            "in": "query",
            "name": "text",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Pass to lookup an item by exact name match. Must pass folderId as well when using this.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "lowerName",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/Item"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Read access was denied on the parent folder."
          }
        },
        "summary": "List or search for items.",
        "tags": [
          "item"
        ]
      },
      "post": {
        "operationId": "item_createItem",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the parent folder.",
            "in": "query",
            "name": "folderId",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Name for the item.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "",
            "description": "Description for the item.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Return existing item (by name) if it exists.",
            "in": "query",
            "name": "reuseExisting",
            "required": false,
            "type": "boolean"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the metadata keys to add",
            "in": "formData",
            "name": "metadata",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Write access was denied on the parent folder."
          }
        },
        "summary": "Create a new item.",
        "tags": [
          "item"
        ]
      }
    },
    "/item/templates": {
      "get": {
        "description": "This endpoint will be used for inserting/updating template for item data for existing account",
        "operationId": "item_getTemplates",
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied to the account."
          }
        },
        "summary": "Insert/Update template.",
        "tags": [
          "item"
        ]
      },
      "put": {
        "description": "This endpoint will be used for inserting/updating template for item data for existing account",
        "operationId": "item_upsertTemplates",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "template data",
            "in": "formData",
            "name": "templateInfo",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Write access was denied to the account."
          }
        },
        "summary": "Insert/Update template.",
        "tags": [
          "item"
        ]
      }
    },
    "/item/{id}": {
      "delete": {
        "operationId": "item_deleteItem",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the item."
          }
        },
        "summary": "Delete an item by ID.",
        "tags": [
          "item"
        ]
      },
      "get": {
        "operationId": "item_getItem",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the item."
          }
        },
        "summary": "Get an item by ID.",
        "tags": [
          "item"
        ]
      },
      "put": {
        "operationId": "item_updateItem",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Name for the item.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Description for the item.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Pass this to move the item to a new folder.",
            "in": "query",
            "name": "folderId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the metadata keys to add",
            "in": "formData",
            "name": "metadata",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Write access was denied for the item or folder."
          }
        },
        "summary": "Edit an item or move it to another folder.",
        "tags": [
          "item"
        ]
      }
    },
    "/item/{id}/copy": {
      "post": {
        "description": "If no folderId parameter is specified, creates a copy of the item in its current containing folder.",
        "operationId": "item_copyItem",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the original item.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the parent folder.",
            "in": "query",
            "name": "folderId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Name for the new item.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Description for the new item.",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "A parameter was invalid.\n\nID was invalid."
          },
          "403": {
            "description": "Read access was denied on the original item.\n\nWrite access was denied on the parent folder."
          }
        },
        "summary": "Copy an item.",
        "tags": [
          "item"
        ]
      }
    },
    "/item/{id}/download": {
      "get": {
        "operationId": "item_download",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Byte offset into the file.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "If unspecified, items with one file are downloaded as that file, and other items are downloaded as a zip archive.  If 'zip', a zip archive is always sent.",
            "in": "query",
            "name": "format",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "attachment",
            "description": "Specify the Content-Disposition response header disposition-type value, only applied for single file items.",
            "enum": [
              "inline",
              "attachment"
            ],
            "in": "query",
            "name": "contentDisposition",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Arbitrary data to send along with the download request, only applied for single file items.",
            "in": "query",
            "name": "extraParameters",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the item."
          }
        },
        "summary": "Download the contents of an item.",
        "tags": [
          "item"
        ]
      }
    },
    "/item/{id}/files": {
      "get": {
        "operationId": "item_getFiles",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "name",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/File"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the item."
          }
        },
        "summary": "Get the files within an item.",
        "tags": [
          "item"
        ]
      }
    },
    "/item/{id}/metadata": {
      "delete": {
        "operationId": "item_deleteMetadata",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON list containing the metadata fields to delete",
            "in": "body",
            "name": "fields",
            "required": true,
            "schema": {
              "$ref": "#/definitions/string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "ID was invalid.\n\nInvalid JSON passed in request body.\n\nMetadata key name was invalid."
          },
          "403": {
            "description": "Write access was denied for the item."
          }
        },
        "summary": "Delete metadata fields on an item.",
        "tags": [
          "item"
        ]
      },
      "put": {
        "description": "Set metadata fields to null in order to delete them.",
        "operationId": "item_setMetadata",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the metadata keys to add",
            "in": "body",
            "name": "metadata",
            "required": true,
            "schema": {
              "$ref": "#/definitions/string"
            }
          },
          {
            "default": false,
            "description": "Whether \"null\" is allowed as a metadata value.",
            "in": "query",
            "name": "allowNull",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "ID was invalid.\n\nInvalid JSON passed in request body.\n\nMetadata key name was invalid."
          },
          "403": {
            "description": "Write access was denied for the item."
          }
        },
        "summary": "Set metadata fields on an item.",
        "tags": [
          "item"
        ]
      }
    },
    "/item/{id}/rootpath": {
      "get": {
        "operationId": "item_rootpath",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the item."
          }
        },
        "summary": "Get the path to the root of the item's hierarchy.",
        "tags": [
          "item"
        ]
      }
    },
    "/notification": {
      "get": {
        "description": "This endpoint can be used for manual long-polling when SSE support is disabled or otherwise unavailable. The events are always returned in chronological order.",
        "operationId": "notification_listNotifications",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Filter out events before this date.",
            "format": "date-time",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not logged in."
          }
        },
        "summary": "List notification events",
        "tags": [
          "notification"
        ]
      }
    },
    "/notification/send-push-notifications": {
      "get": {
        "description": "This endpoint is used to send push notifications to users using FCMNotification. <br>This endpoint is going to be removed soon.",
        "operationId": "notification_sendPushNotifications",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not logged in."
          }
        },
        "summary": "Send push notifications",
        "tags": [
          "notification"
        ]
      }
    },
    "/notification/stream": {
      "get": {
        "description": "This uses long-polling to keep the connection open for several minutes at a time (or longer) and should be requested with an EventSource object or other SSE-capable client. <p>Notifications are returned within a few seconds of when they occur.  When no notification occurs for the timeout duration, the stream is closed. <p>This connection can stay open indefinitely long.",
        "operationId": "notification_stream",
        "parameters": [
          {
            "default": 300,
            "description": "The duration without a notification before the stream is closed.",
            "format": "int32",
            "in": "query",
            "name": "timeout",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter out events before this time stamp.",
            "format": "int32",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "text/event-stream"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You are not logged in."
          },
          "503": {
            "description": "The notification stream is not enabled."
          }
        },
        "summary": "Stream notifications for a given user via the SSE protocol.",
        "tags": [
          "notification"
        ]
      }
    },
    "/protocol": {
      "get": {
        "operationId": "protocol_getProtocolFromURL",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "URL of protocol.",
            "in": "query",
            "name": "url",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid protocol URL."
          },
          "403": {
            "description": "Read access was denied for this protocol."
          }
        },
        "summary": "Get a protocol by URL.",
        "tags": [
          "protocol"
        ]
      }
    },
    "/protocol/{id}": {
      "get": {
        "operationId": "protocol_getProtocol",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid protocol ID."
          },
          "403": {
            "description": "Read access was denied for this protocol."
          }
        },
        "summary": "Get a protocol by ID.",
        "tags": [
          "protocol"
        ]
      }
    },
    "/relationship": {
      "get": {
        "operationId": "relationship_getDefinedRelations",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Get all currently-defined interpersonal relationships.",
        "tags": [
          "relationship"
        ]
      }
    },
    "/relationship/informant": {
      "get": {
        "operationId": "relationship_getDefinedReports",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Get all currently-defined informant relationships.",
        "tags": [
          "relationship"
        ]
      }
    },
    "/resource": {
      "delete": {
        "operationId": "resource_delete",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON-encoded set of resources to delete. Each type is a list of ids.  For example: {\"item\": [(item id 1), (item id2)], \"folder\": [(folder id 1)]}.",
            "in": "query",
            "name": "resources",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether to record progress on this task.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Unsupported or unknown resource type.\n\nInvalid resources format.\n\nNo resources specified.\n\nResource not found."
          },
          "403": {
            "description": "Admin access was denied for a resource."
          }
        },
        "summary": "Delete a set of items, folders, or other resources.",
        "tags": [
          "resource"
        ]
      }
    },
    "/resource/copy": {
      "post": {
        "operationId": "resource_copyResources",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON-encoded set of resources to copy. Each type is a list of ids.  Only folders and items may be specified.  For example: {\"item\": [(item id 1), (item id2)], \"folder\": [(folder id 1)]}.",
            "in": "query",
            "name": "resources",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Parent type for the new parent of these resources.",
            "in": "query",
            "name": "parentType",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Parent ID for the new parent of these resources.",
            "in": "query",
            "name": "parentId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether to record progress on this task.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Unsupported or unknown resource type.\n\nInvalid resources format.\n\nResource type not supported.\n\nNo resources specified.\n\nResource not found.\n\nID was invalid."
          }
        },
        "summary": "Copy a set of items and folders.",
        "tags": [
          "resource"
        ]
      }
    },
    "/resource/download": {
      "get": {
        "description": "This route is also exposed via the POST method because the request parameters can be quite long, and encoding them in the URL (as is standard when using the GET method) can cause the URL to become too long, which causes errors.",
        "operationId": "resource_download",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON-encoded set of resources to download. Each type is a list of ids. For example: {\"item\": [(item id 1), (item id 2)], \"folder\": [(folder id 1)]}.",
            "in": "query",
            "name": "resources",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Include any metadata in JSON files in the archive.",
            "in": "query",
            "name": "includeMetadata",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Unsupported or unknown resource type.\n\nInvalid resources format.\n\nNo resources specified.\n\nResource not found."
          },
          "403": {
            "description": "Read access was denied for a resource."
          }
        },
        "summary": "Download a set of items, folders, collections, and users as a zip archive.",
        "tags": [
          "resource"
        ]
      },
      "post": {
        "description": "This route is also exposed via the POST method because the request parameters can be quite long, and encoding them in the URL (as is standard when using the GET method) can cause the URL to become too long, which causes errors.",
        "operationId": "resource_download",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON-encoded set of resources to download. Each type is a list of ids. For example: {\"item\": [(item id 1), (item id 2)], \"folder\": [(folder id 1)]}.",
            "in": "query",
            "name": "resources",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Include any metadata in JSON files in the archive.",
            "in": "query",
            "name": "includeMetadata",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Unsupported or unknown resource type.\n\nInvalid resources format.\n\nNo resources specified.\n\nResource not found."
          },
          "403": {
            "description": "Read access was denied for a resource."
          }
        },
        "summary": "Download a set of items, folders, collections, and users as a zip archive.",
        "tags": [
          "resource"
        ]
      }
    },
    "/resource/lookup": {
      "get": {
        "operationId": "resource_lookup",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The path of the resource.  The path must be an absolute Unix path starting with either \"/user/[user name]\", for a user's resources or \"/collection/[collection name]\", for resources under a collection.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Path is invalid.\n\nPath refers to a resource that does not exist."
          },
          "403": {
            "description": "Read access was denied for the resource."
          }
        },
        "summary": "Look up a resource in the data hierarchy by path.",
        "tags": [
          "resource"
        ]
      }
    },
    "/resource/move": {
      "put": {
        "operationId": "resource_moveResources",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON-encoded set of resources to move. Each type is a list of ids.  Only folders and items may be specified.  For example: {\"item\": [(item id 1), (item id2)], \"folder\": [(folder id 1)]}.",
            "in": "query",
            "name": "resources",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Parent type for the new parent of these resources.",
            "enum": [
              "user",
              "collection",
              "folder"
            ],
            "in": "query",
            "name": "parentType",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Parent ID for the new parent of these resources.",
            "in": "query",
            "name": "parentId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether to record progress on this task.",
            "in": "query",
            "name": "progress",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Unsupported or unknown resource type.\n\nInvalid resources format.\n\nResource type not supported.\n\nNo resources specified.\n\nResource not found.\n\nID was invalid."
          }
        },
        "summary": "Move a set of items and folders.",
        "tags": [
          "resource"
        ]
      }
    },
    "/resource/search": {
      "get": {
        "operationId": "resource_search",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The search query.",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "text",
            "description": "The search mode. Can always use either a text search or a prefix-based search.",
            "in": "query",
            "name": "mode",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON list of resource types to search for, e.g. [\"user\", \"folder\", \"item\"].",
            "in": "query",
            "name": "types",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Minimum required access level.",
            "format": "int32",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid type list format."
          }
        },
        "summary": "Search for resources in the system.",
        "tags": [
          "resource"
        ]
      }
    },
    "/resource/{id}": {
      "get": {
        "operationId": "resource_getResource",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the resource.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The type of the resource (item, file, etc.).",
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the resource."
          }
        },
        "summary": "Get any resource by ID.",
        "tags": [
          "resource"
        ]
      }
    },
    "/resource/{id}/path": {
      "get": {
        "operationId": "resource_path",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the resource.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The type of the resource (item, file, etc.).",
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid.\n\nInvalid resource type."
          },
          "403": {
            "description": "Read access was denied for the resource."
          }
        },
        "summary": "Get path of a resource.",
        "tags": [
          "resource"
        ]
      }
    },
    "/resource/{id}/timestamp": {
      "put": {
        "operationId": "resource_setTimestamp",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the resource.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The type of the resource (item, file, etc.).",
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The new created timestamp.",
            "in": "query",
            "name": "created",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The new updated timestamp.",
            "in": "query",
            "name": "updated",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Access was denied for the resource."
          }
        },
        "summary": "Set the created or updated timestamp for a resource.",
        "tags": [
          "resource"
        ]
      }
    },
    "/response/last7Days/{applet}": {
      "get": {
        "operationId": "response_getLast7Days",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the Applet this response is to.",
            "in": "query",
            "name": "applet",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the Subject this response is about.",
            "in": "query",
            "name": "subject",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "start date for response data.",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "true if retrieve old items in the response data",
            "in": "query",
            "name": "includeOldItems",
            "required": false,
            "type": "boolean"
          },
          {
            "default": true,
            "description": "if true, group by date/activity",
            "in": "query",
            "name": "groupByDateActivity",
            "required": false,
            "type": "boolean"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": [],
            "description": "item id array which represents historical items that user has on local device.",
            "in": "query",
            "name": "localItems",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": [],
            "description": "activity id array which represents historical activities that user has on local device.",
            "in": "query",
            "name": "localActivities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for this applet for this user."
          }
        },
        "summary": "Get the last 7 days' responses for the current user.",
        "tags": [
          "response"
        ]
      }
    },
    "/response/{applet}": {
      "get": {
        "operationId": "response_getResponsesForApplet",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the applet",
            "in": "path",
            "name": "applet",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of profile IDs. If given, it only retrieves responses from the given users",
            "in": "query",
            "name": "users",
            "required": false,
            "type": "array"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Only retrieves responses for the given activities",
            "in": "query",
            "name": "activities",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Date for the oldest entry to retrieve",
            "format": "date-time",
            "in": "query",
            "name": "fromDate",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Date for the newest entry to retrieve",
            "format": "date-time",
            "in": "query",
            "name": "toDate",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "true if retrieve old items in the response data",
            "in": "query",
            "name": "includeOldItems",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for this applet for this user."
          }
        },
        "summary": "Get all responses for a given applet.",
        "tags": [
          "response"
        ]
      },
      "put": {
        "description": "This endpoint is used when user wants to update previous responses.",
        "operationId": "response_updateReponseHistory",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the Applet this response is to.",
            "in": "path",
            "name": "applet",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "profile id for user",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the new response data and public key.",
            "in": "formData",
            "name": "responses",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Write access was denied on the parent folder."
          }
        },
        "summary": "update user response items.",
        "tags": [
          "response"
        ]
      }
    },
    "/response/{applet}/updateResponseToken": {
      "post": {
        "description": "This endpoint is used when a user selects token-prize on mobile app.",
        "operationId": "response_updateResponseToken",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the Applet this response is to.",
            "in": "path",
            "name": "applet",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the token update and cumulative.",
            "in": "formData",
            "name": "updateInfo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Use Response token.",
        "tags": [
          "response"
        ]
      }
    },
    "/response/{applet}/{activity}": {
      "post": {
        "description": "This endpoint is used when a user finishs one activity on mobile app.",
        "operationId": "response_createResponseItem",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the Applet this response is to.",
            "in": "path",
            "name": "applet",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the Activity this response is to.",
            "in": "path",
            "name": "activity",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID (canonical or applet-specific) of the user that is the subject.",
            "in": "query",
            "name": "subject_id",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": false,
            "description": "Boolean, is this response in-progress rather than complete. (_not yet implemented_)",
            "in": "query",
            "name": "pending",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing the metadata keys to add.",
            "in": "formData",
            "name": "metadata",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Write access was denied on the parent folder."
          }
        },
        "summary": "Create a new user response item.",
        "tags": [
          "response"
        ]
      }
    },
    "/schedule": {
      "get": {
        "operationId": "schedule_getSchedule",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">TZ database name</a> of the timezone to return times in. Times returned in UTC if omitted.",
            "in": "query",
            "name": "timezone",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          }
        },
        "summary": "Get schedule Array for the logged-in user.",
        "tags": [
          "schedule"
        ]
      }
    },
    "/screen": {
      "get": {
        "operationId": "screen_getScreenByURL",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "URL of Screen.",
            "in": "query",
            "name": "url",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        },
        "summary": "Get a screen by URL.",
        "tags": [
          "screen"
        ]
      },
      "post": {
        "operationId": "screen_createScreen",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID of the parent Activity or Activity version",
            "in": "query",
            "name": "activity",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name for the new screen.",
            "in": "query",
            "name": "screenName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the screen."
          }
        },
        "summary": "Create a new screen.",
        "tags": [
          "screen"
        ]
      }
    },
    "/screen/{id}": {
      "get": {
        "operationId": "screen_getScreen",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Read access was denied for the screen."
          }
        },
        "summary": "Get a screen by ID.",
        "tags": [
          "screen"
        ]
      }
    },
    "/token/current": {
      "get": {
        "operationId": "token_currentSession",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        },
        "summary": "Retrieve the current session information.",
        "tags": [
          "token"
        ]
      }
    },
    "/token/scopes": {
      "get": {
        "operationId": "token_listScopes",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "List all token scopes available in the system.",
        "tags": [
          "token"
        ]
      }
    },
    "/token/session": {
      "delete": {
        "description": "Attempts to delete your authentication cookie.",
        "operationId": "token_deleteSession",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        },
        "summary": "Remove a session from the system.",
        "tags": [
          "token"
        ]
      },
      "get": {
        "description": "If you are logged in, this will return a token associated with that login.",
        "operationId": "token_getSession",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        },
        "summary": "Get an anonymous session token for the system.",
        "tags": [
          "token"
        ]
      }
    },
    "/user": {
      "get": {
        "deprecated": true,
        "operationId": "user_find",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Pass this to perform a full text search for items.",
            "in": "query",
            "name": "text",
            "required": false,
            "type": "string"
          },
          {
            "default": 20000,
            "description": "Result set size limit.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Offset into result set.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "default": "firstName",
            "description": "Field to sort the result set by.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Sort order: 1 for ascending, -1 for descending.",
            "enum": [
              1,
              -1
            ],
            "format": "int32",
            "in": "query",
            "name": "sortdir",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          }
        },
        "summary": "List or search for users.",
        "tags": [
          "user"
        ]
      },
      "post": {
        "description": "This endpoint is used to create a new account in mindlogger. <br>we save user's email as hashed value, so nobody will be able to see actual email address. <br>we don't save user's firstName and lastName as plain text in the database.",
        "operationId": "user_createUser",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The user's requested password",
            "in": "query",
            "name": "password",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "The user's display name, usually just their first name.",
            "in": "query",
            "name": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The user's email address.",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "lastName of user.",
            "in": "query",
            "name": "lastName",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "firstName of user.",
            "in": "query",
            "name": "firstName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "A parameter was invalid, or the specified login or email already exists in the system."
          }
        },
        "summary": "Create a new user.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/accountName": {
      "put": {
        "description": "this endpoint is used for updating user's accountName",
        "operationId": "user_changeAccountName",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Your new accountName.",
            "in": "query",
            "name": "accountName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "You are not logged in."
          }
        },
        "summary": "Change your accountName.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/accounts": {
      "get": {
        "description": "This endpoint is used for users to get their own/invited accounts.",
        "operationId": "user_getAccounts",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to see accounts for this user."
          }
        },
        "summary": "Get all your applets by role.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/applet/{id}": {
      "get": {
        "operationId": "user_getOwnAppletById",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "user",
            "description": "One of dict_keys(['user', 'coordinator', 'editor', 'manager', 'reviewer'])",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": false,
            "description": "true if retrieve schedule info in applet metadata",
            "in": "query",
            "name": "retrieveSchedule",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": false,
            "description": "true if retrieve all events in applet metadata",
            "in": "query",
            "name": "retrieveAllEvents",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get your specific applet by id.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/applet/{id}/schedule": {
      "put": {
        "description": "This endpoint is used when users want to set their own custom schedule. <br>we are not using this functionality at the moment.",
        "operationId": "user_setSchedule",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing schedule information for an activity",
            "in": "formData",
            "name": "schedule",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid applet ID."
          },
          "403": {
            "description": "Read access was denied for this applet."
          }
        },
        "summary": "Set or update your own custom schedule information for an applet.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/applets": {
      "put": {
        "description": "This endpoint is used for users to get their applets with specified role.",
        "operationId": "user_getOwnApplets",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "user",
            "description": "One of dict_keys(['user', 'coordinator', 'editor', 'manager', 'reviewer'])",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "parameter specifying applets metadata in local device",
            "in": "formData",
            "name": "localInfo",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "If true, applets returned from backend does not depend on account_id",
            "in": "query",
            "name": "getAllApplets",
            "required": true,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "if true, retrieve schedule info in applet metadata",
            "in": "query",
            "name": "retrieveSchedule",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "true if retrieve all events in applet metadata",
            "in": "query",
            "name": "retrieveAllEvents",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "true only if get today's event, valid only if getAllEvents is set to false",
            "format": "int32",
            "in": "query",
            "name": "numberOfDays",
            "required": false,
            "type": "integer"
          },
          {
            "default": false,
            "description": "if true, responses are returned",
            "in": "query",
            "name": "retrieveResponses",
            "required": false,
            "type": "boolean"
          },
          {
            "default": true,
            "description": "if true, group responses by date and activity",
            "in": "query",
            "name": "groupByDateActivity",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "if true, retrieve last response time",
            "in": "query",
            "name": "retrieveLastResponseTime",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to see any of this user's applets."
          }
        },
        "summary": "Get all your applets by role.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/authentication": {
      "delete": {
        "description": "Attempts to delete your authentication cookie. <br>This endpoint is used when users logout. <br>",
        "operationId": "user_logout",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        },
        "summary": "Log out of the system.",
        "tags": [
          "user"
        ]
      },
      "get": {
        "description": "Pass your username and password using HTTP Basic Auth. Sends a cookie that should be passed back in future requests. <br>this endpoint is used when users login mindlogger.",
        "operationId": "user_login",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": true,
            "description": "set to false when logging in as username (this value is set to true by default)",
            "in": "query",
            "name": "loginAsEmail",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A one-time password for this user",
            "in": "header",
            "name": "Girder-OTP",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "device id for push notifications",
            "in": "header",
            "name": "deviceId",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "timezone of user mobile",
            "in": "header",
            "name": "timezone",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "en",
            "description": "the desired language for the response",
            "in": "query",
            "name": "lang",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Missing Authorization header."
          },
          "403": {
            "description": "Invalid login or password."
          }
        },
        "summary": "Log in to the system.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/details": {
      "get": {
        "description": "This endpoint is used to get number of folders that user has access",
        "operationId": "user_getUsersDetails",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get detailed information of accessible users.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/invites": {
      "get": {
        "deprecated": true,
        "operationId": "user_getGroupInvites",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get all pending invites for the logged-in user.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/me": {
      "get": {
        "operationId": "user_getMe",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Retrieve the currently logged-in user information.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/password": {
      "put": {
        "description": "This endpoint is used when users need to update their password.",
        "operationId": "user_changePassword",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Your current password or a temporary access token.",
            "in": "query",
            "name": "old",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Your new password.",
            "in": "query",
            "name": "new",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Your new password is invalid."
          },
          "401": {
            "description": "You are not logged in.\n\nYour old password is incorrect."
          }
        },
        "summary": "Change your password.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/password/temporary": {
      "put": {
        "description": "This endpoint is used in forgot-password functionality <br>backend sends temporary access link to user via email.",
        "operationId": "user_generateTemporaryPassword",
        "parameters": [
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Your email address.",
            "in": "query",
            "name": "email",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "en",
            "description": "Language of mail template and web link",
            "in": "query",
            "name": "lang",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "That email does not exist in the system."
          }
        },
        "summary": "Create a temporary access token for a user.  The user's password is not changed.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/password/temporary/{id}": {
      "get": {
        "description": "This endpoint is used in forgot-password functionality. <br>When users click link from their mail box frontend makes request to this endpoint.",
        "operationId": "user_checkTemporaryPassword",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The user ID to check.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The token to check.",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "The token does not grant temporary access to the specified user."
          }
        },
        "summary": "Check if a specified token is a temporary access token for the specified user.  If the token is valid, returns information on the token and user.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/profile": {
      "put": {
        "operationId": "user_updateProfile",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON Object with values to update, overriding existing values.",
            "in": "query",
            "name": "update",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Profile ID.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Applet ID.",
            "in": "query",
            "name": "applet",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID code.",
            "in": "query",
            "name": "idCode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Update a user profile. Requires either profile ID __OR__ applet ID and ID code.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/responseUpdateRequest": {
      "post": {
        "operationId": "user_requestResponseReUpload",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "public keys for applet user",
            "in": "formData",
            "name": "userPublicKeys",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "send response reupload request to managers.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/switchAccount": {
      "put": {
        "description": "This endpoint is used for users to switch their current account.",
        "operationId": "user_switchAccount",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "account id to switch",
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to see this account."
          }
        },
        "summary": "switch account.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/updates": {
      "get": {
        "description": "This endpoint is used for users to get updates via notifications",
        "operationId": "user_getUserUpdates",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "You are not logged in."
          }
        },
        "summary": "get user updates",
        "tags": [
          "user"
        ]
      }
    },
    "/user/username": {
      "put": {
        "deprecated": true,
        "description": "this endpoint is used for updating user's login name but it is deprecated since we are using email as login",
        "operationId": "user_changeUserName",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Your new username.",
            "in": "query",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "You are not logged in."
          }
        },
        "summary": "Change your username.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/verification": {
      "post": {
        "description": "this endpoint is used for sending verificiation email to user. <br>we don't use this endpoint often since we automatically do it when users sign-up.",
        "operationId": "user_sendVerificationEmail",
        "parameters": [
          {
            "_lower": false,
            "_strip": true,
            "_upper": false,
            "description": "Your email.",
            "in": "query",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "That login is not registered."
          }
        },
        "summary": "Send verification email.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}": {
      "delete": {
        "description": "This endpoint is used to remove an account using id. <br>The removed account won't be reverted.",
        "operationId": "user_deleteUser",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to delete this user."
          }
        },
        "summary": "Delete a user by ID.",
        "tags": [
          "user"
        ]
      },
      "get": {
        "description": "This endpoint is used to get user data (firstName, lastName) from id",
        "operationId": "user_getUserByID",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Profile ID or ID code",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to see this user."
          }
        },
        "summary": "Get a user by ID.",
        "tags": [
          "user"
        ]
      },
      "put": {
        "deprecated": true,
        "operationId": "user_updateUser",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "",
            "description": "Display name of the user, usually just their first name.",
            "in": "query",
            "name": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Is the user a site admin (admin access required)",
            "in": "query",
            "name": "admin",
            "required": false,
            "type": "boolean"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The account status (admin access required)",
            "enum": [
              "pending",
              "enabled",
              "disabled"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Deprecated. Do not use.",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Deprecated. Do not use.",
            "in": "query",
            "name": "firstName",
            "required": false,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Deprecated. Do not use.",
            "in": "query",
            "name": "lastName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "You do not have write access for this user.\n\nMust be an admin to create an admin."
          }
        },
        "summary": "Update a user's information.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}/access": {
      "get": {
        "deprecated": true,
        "operationId": "user_getUserAccess",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to see this user."
          }
        },
        "summary": "Get the access control list for a user.",
        "tags": [
          "user"
        ]
      },
      "put": {
        "deprecated": true,
        "operationId": "user_updateUserAccess",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The JSON-encoded access control list.",
            "in": "query",
            "name": "access",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "Admin access was denied for the user."
          }
        },
        "summary": "Update the access control list for a user.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}/applets": {
      "get": {
        "deprecated": true,
        "operationId": "user_getUserApplets",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "default": "user",
            "description": "One of dict_keys(['user', 'coordinator', 'editor', 'manager', 'reviewer'])",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "If true, only returns an Array of the IDs of assigned applets. Otherwise, returns an Array of Objects keyed with \"applet\" \"protocol\", \"activities\" and \"items\" with expanded JSON-LD as values.",
            "in": "query",
            "name": "ids_only",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to see any of this user's applets."
          }
        },
        "summary": "Get all applets for a user by that user's ID and role.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}/code": {
      "delete": {
        "operationId": "user_removeIDCode",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Profile ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID code to remove from profile. If the ID code to remove is the only ID code for that profile, a new one will be auto-generated.",
            "in": "query",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to see this user."
          }
        },
        "summary": "Remove an ID Code from a user.",
        "tags": [
          "user"
        ]
      },
      "put": {
        "operationId": "user_updateIDCode",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Profile ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID code to add to profile",
            "in": "query",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to see this user."
          }
        },
        "summary": "Add a new ID Code to a user.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}/details": {
      "get": {
        "deprecated": true,
        "description": "",
        "operationId": "user_getUserDetails",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Read access was denied on the user."
          }
        },
        "summary": "Get detailed information about a user.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}/knows": {
      "put": {
        "operationId": "user_setUserRelationship",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID or ID code of user to add relationship to",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Relationship to add",
            "in": "query",
            "name": "rel",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "ID or ID code of related individual.",
            "in": "query",
            "name": "otherId",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "Name to display for related individual",
            "in": "query",
            "name": "otherName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "ID was invalid."
          },
          "403": {
            "description": "You do not have permission to see this user."
          }
        },
        "summary": "Add a relationship between users.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}/otp": {
      "delete": {
        "operationId": "user_removeOtp",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Admin access was denied on the user."
          }
        },
        "summary": "Disable one-time passwords for this user.",
        "tags": [
          "user"
        ]
      },
      "post": {
        "operationId": "user_initializeOtp",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Admin access was denied on the user."
          }
        },
        "summary": "Initiate the enablement of one-time passwords for this user.",
        "tags": [
          "user"
        ]
      },
      "put": {
        "operationId": "user_finalizeOtp",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the document.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A one-time password for this user",
            "in": "header",
            "name": "Girder-OTP",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A parameter was invalid."
          },
          "403": {
            "description": "Admin access was denied on the user."
          }
        },
        "summary": "Finalize the enablement of one-time passwords for this user.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}/verification": {
      "put": {
        "description": "we use this endpoint for email-verification process. <br>* this endpoint is used when users click email-verification link in their mail box.",
        "operationId": "user_verifyEmail",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The user ID to check.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The token to check.",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "The token is invalid or expired."
          }
        },
        "summary": "Verify an email address using a token.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{uid}/applet/{aid}/schedule": {
      "put": {
        "deprecated": true,
        "description": "This endpoint designed for coordinators/managers to update individualized schedule. <br>But we are not using this endpoint at the moment. <br>Use PUT^applet/[id]/schedule instead of this.",
        "operationId": "user_setOtherSchedule",
        "parameters": [
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the user's profile for this applet.",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "The ID of the applet.",
            "in": "path",
            "name": "aid",
            "required": true,
            "type": "string"
          },
          {
            "_lower": false,
            "_strip": false,
            "_upper": false,
            "description": "A JSON object containing schedule information for an activity",
            "in": "formData",
            "name": "schedule",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid ID."
          },
          "403": {
            "description": "Read access was denied."
          }
        },
        "summary": "Set or update custom schedule information for a user of an applet you manage or coordinate.",
        "tags": [
          "user"
        ]
      }
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "name": "account"
    },
    {
      "name": "activity"
    },
    {
      "name": "api_key"
    },
    {
      "name": "applet"
    },
    {
      "name": "assetstore"
    },
    {
      "name": "collection"
    },
    {
      "name": "context"
    },
    {
      "name": "file"
    },
    {
      "name": "folder"
    },
    {
      "name": "group"
    },
    {
      "name": "invitation"
    },
    {
      "name": "item"
    },
    {
      "name": "notification"
    },
    {
      "name": "protocol"
    },
    {
      "name": "relationship"
    },
    {
      "name": "resource"
    },
    {
      "name": "response"
    },
    {
      "name": "schedule"
    },
    {
      "name": "screen"
    },
    {
      "name": "token"
    },
    {
      "name": "user"
    }
  ]
}